import{_ as o,c as l,o as a,aK as s,j as t,a as i}from"./chunks/framework.gpVTZwhR.js";const v=JSON.parse('{"title":"05 自由组合定律 - 亲子代互推题型","description":"","frontmatter":{},"headers":[{"level":2,"title":"题型 1 独立相乘原则 - 基础","slug":"题型-1-独立相乘原则-基础","link":"#题型-1-独立相乘原则-基础","children":[{"level":3,"title":"题 1","slug":"题-1","link":"#题-1","children":[]}]},{"level":2,"title":"题型 2 已知亲本推子代 - 中档","slug":"题型-2-已知亲本推子代-中档","link":"#题型-2-已知亲本推子代-中档","children":[{"level":3,"title":"题 2","slug":"题-2","link":"#题-2","children":[]}]},{"level":2,"title":"题型 3 已知子代推亲本 - 中档","slug":"题型-3-已知子代推亲本-中档","link":"#题型-3-已知子代推亲本-中档","children":[{"level":3,"title":"题 3","slug":"题-3","link":"#题-3","children":[]}]},{"level":2,"title":"题型 4 亲子代互推 - 难","slug":"题型-4-亲子代互推-难","link":"#题型-4-亲子代互推-难","children":[{"level":3,"title":"题 4","slug":"题-4","link":"#题-4","children":[]},{"level":3,"title":"题 5","slug":"题-5","link":"#题-5","children":[]}]}],"relativePath":"gaozhong/生物/暂时/02 必修二/01 遗传因子的发现/05 自由组合定律-亲子代互推题型.md","filePath":"gaozhong/生物/暂时/02 必修二/01 遗传因子的发现/05 自由组合定律-亲子代互推题型.md","lastUpdated":1734503195000}'),n={name:"gaozhong/生物/暂时/02 必修二/01 遗传因子的发现/05 自由组合定律-亲子代互推题型.md"},r={class:"details custom-block"},u={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.719ex",height:"1.645ex",role:"img",focusable:"false",viewBox:"0 -705 760 727","aria-hidden":"true"},m={class:"tip custom-block"},c={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.148ex",height:"1.984ex",role:"img",focusable:"false",viewBox:"0 -683 2275.2 877","aria-hidden":"true"},h={class:"details custom-block"},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.719ex",height:"1.645ex",role:"img",focusable:"false",viewBox:"0 -705 760 727","aria-hidden":"true"};function g(x,e,_,b,k,w){return a(),l("div",null,[e[14]||(e[14]=s("",4)),t("details",r,[e[2]||(e[2]=t("summary",null,"解",-1)),e[3]||(e[3]=t("img",{src:"https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/allxueke/Snipaste_2024-10-19_18-41-09.png"},null,-1)),t("p",null,[t("mjx-container",u,[(a(),l("svg",d,e[0]||(e[0]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D436",d:"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z",style:{"stroke-width":"3"}})])])],-1)]))),e[1]||(e[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"C")])],-1))])])]),e[15]||(e[15]=s("",4)),t("div",m,[e[8]||(e[8]=t("p",{class:"custom-block-title"},"TIP",-1)),t("p",null,[e[6]||(e[6]=i("重组类型指的是子二代中出现的不同于亲代的表现型或基因型。(默认是指不同于亲代的表现型，这里的亲代指 ")),t("mjx-container",c,[(a(),l("svg",p,e[4]||(e[4]=[s("",1)]))),e[5]||(e[5]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"P"),t("mo",null,","),t("msub",null,[t("mi",null,"F"),t("mn",null,"1")])])],-1))]),e[7]||(e[7]=i(")"))])]),e[16]||(e[16]=s("",3)),t("details",h,[e[11]||(e[11]=t("summary",null,"解",-1)),e[12]||(e[12]=t("p",null,"根据表现型，推基因型。",-1)),e[13]||(e[13]=t("img",{class:"w-50%",src:"https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/allxueke/Snipaste_2024-10-19_19-13-18.png"},null,-1)),t("p",null,[t("mjx-container",T,[(a(),l("svg",Q,e[9]||(e[9]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D436",d:"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z",style:{"stroke-width":"3"}})])])],-1)]))),e[10]||(e[10]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"C")])],-1))])])]),e[17]||(e[17]=s("",9))])}const f=o(n,[["render",g]]);export{v as __pageData,f as default};
