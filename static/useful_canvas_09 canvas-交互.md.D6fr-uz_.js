import{d as u,v as P,c as d,o as h,j as _,C as g,aK as b,G as c,w as m}from"./chunks/framework.gpVTZwhR.js";const v={class:"border-t-1 border-b-1 border-l-none border-r-none border-solid border-t-gray-700 border-b-gray-700 pa-4 my-4"},k=u({__name:"interaction",setup(p){return P(()=>{let a=document.getElementById("canvas-interaction"),e=a.getContext("2d"),o=10,r=10,i=100,s=100,l=!1,t={fillStyle:"lightgray",strokeStyle:"blue",loc:{x:0,y:0},height:s,width:i,offsetX:0,offsetY:0},f=()=>{e.fillStyle=t.fillStyle,e.strokeStyle=t.strokeStyle,e.rect(o,r,i,s),t.loc.x=o,t.loc.y=r,t.width=i,t.height=s,e.fill(),e.stroke()};a.onmousedown=n=>{l=e.isPointInPath(n.offsetX,n.offsetY),t.offsetX=n.clientX-t.loc.x,t.offsetY=n.clientY-t.loc.y,t.loc.x=n.clientX,t.loc.y=n.clientY},a.onmousemove=n=>{l?(e.beginPath(),e.clearRect(0,0,a.width,a.height),e.rect(n.clientX-t.offsetX,n.clientY-t.offsetY,i,s),e.fill(),e.stroke()):e.isPointInPath(n.clientX,n.clientY)?a.style.cursor="pointer":a.style.cursor="default"},a.onmouseup=n=>{l=!1,t.loc.x=n.clientX-t.offsetX,t.loc.y=n.clientY-t.offsetY},f()}),(a,e)=>(h(),d("div",v,e[0]||(e[0]=[_("canvas",{id:"canvas-interaction",width:"400",height:"400",class:"border border-solid border-red"},null,-1)])))}}),x=JSON.parse('{"title":"canvas-交互","description":"","frontmatter":{"label":"canvas"},"headers":[{"level":2,"title":"isPointInPath() 介绍","slug":"ispointinpath-介绍","link":"#ispointinpath-介绍","children":[]},{"level":2,"title":"isPointInStroke() 介绍","slug":"ispointinstroke-介绍","link":"#ispointinstroke-介绍","children":[]},{"level":2,"title":"拖拽小方块","slug":"拖拽小方块","link":"#拖拽小方块","children":[]}],"relativePath":"useful/canvas/09 canvas-交互.md","filePath":"useful/canvas/09 canvas-交互.md","lastUpdated":1710946996000}'),C={name:"useful/canvas/09 canvas-交互.md"},y=Object.assign(C,{setup(p){return(a,e)=>{const o=g("clientOnly");return h(),d("div",null,[e[0]||(e[0]=b('<h1 id="canvas-交互" tabindex="-1">canvas-交互 <a class="header-anchor" href="#canvas-交互" aria-label="Permalink to &quot;canvas-交互&quot;">​</a></h1><h2 id="ispointinpath-介绍" tabindex="-1">isPointInPath() 介绍 <a class="header-anchor" href="#ispointinpath-介绍" aria-label="Permalink to &quot;isPointInPath() 介绍&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInPath" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInPath</a></p><p><code>CanvasRenderingContext2D.isPointInPath()</code> 是 Canvas 2D API 用于判断在当前路径中是否包含检测点的方法。</p><h2 id="ispointinstroke-介绍" tabindex="-1">isPointInStroke() 介绍 <a class="header-anchor" href="#ispointinstroke-介绍" aria-label="Permalink to &quot;isPointInStroke() 介绍&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInStroke" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInStroke</a></p><p>CanvasRenderingContext2D.isPointInStroke() 是 Canvas 2D API 用于检测某点是否在路径的描边线上的方法。</p><h2 id="拖拽小方块" tabindex="-1">拖拽小方块 <a class="header-anchor" href="#拖拽小方块" aria-label="Permalink to &quot;拖拽小方块&quot;">​</a></h2><p>想要拖拽小方块，我们利用 isPointInPath() 来判断某一时刻鼠标是否在矩形路径内，如果在路径内，则切换方块为拖拽状态，设定拖拽的样式变化（如光标变小手等等），然后随着鼠标的按下移动通过不断地清除、设定路径、绘制此时刻图像来达成视觉上的拖拽的目的。</p><p>另外有一些必要的细节，我们一定要注意：当鼠标按下拖拽的时候光标位置在矩形内的某个位置，那么在矩形移动后，光标也应该不断保持在矩形的那个位置。</p>',10)),c(o,null,{default:m(()=>[c(k)]),_:1})])}}});export{x as __pageData,y as default};
